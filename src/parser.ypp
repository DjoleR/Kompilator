%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <map>
#include <vector>
#define YYDEBUG 1

using namespace std;


  extern int yylex();
  extern FILE* yyin;

#include "naredba.hpp"
#include "izraz.hpp"
#include "funkcije.hpp"

  vector<map<char,int> > stekPromenljivih;
  map<string, DefinicjaFunkcije*> tablicaFunkcija;


  void yyerror(string s)
  {
    cout << "Sintaksna greska : " << s << endl;
    
    stekPromenljivih.clear();

    tablicaFunkcija.clear();

    exit(EXIT_FAILURE);
  }


%}

%union
{
  Izraz* i;
  int broj;
  char c;
  string *s;
  Naredba* n;
  vector<Naredba* > *vn;
  vector<char> *vc;
  vector<Izraz*> *vi;
  DefinicjaFunkcije *df;
}

%token pocetak_token kraj_token ispisi_token mod_token unesi_token funkcija_token za_token
%token ponavljaj_token ako_token onda_token dok_token radi_token jednako_token inace_token vrati_token

%token <broj> num_token 
%token <s> tekst_token imeFunkcije_token

%token <c> id_token

%type <i> AritmIzraz
%type <n> Naredba1 Blok Inic 
%type <vn> NizNaredbi 
%type <vc> nizParametara
%type <vi> nizIzraza
%type <df> Funkcija1



%nonassoc '='
%left '<' '>' jednako_token razlicito_token manjeJednako_token veceJednako_token
%left '+' '-'
%left '*' '/' 
%left mod_token
%nonassoc UMINUS

%expect 1

%%

Program: nizFunkcija Blok '.'             {  $2->Izvrsi(); }
| Blok '.'                                {  $1->Izvrsi(); }
;

nizFunkcija: Funkcija1 ';' nizFunkcija    {  }
| Funkcija1 ';'                           {  }
;

///////////////////////////////////////
//////////////////// Funkcija
///////////////////////////////////////

Funkcija1: funkcija_token imeFunkcije_token '(' ')' Blok          { tablicaFunkcija[*$2] = new DefinicjaFunkcije(*$2, NULL, $5);  }
| funkcija_token imeFunkcije_token '(' nizParametara ')' Blok     { tablicaFunkcija[*$2] = new DefinicjaFunkcije(*$2, $4, $6);    }
;

nizParametara: nizParametara ',' id_token           { $$ = $1; $$->push_back($3);                 }
| id_token                                          { $$ = new vector<char>(); $$->push_back($1); }
;

///////////////////////////////////////
////////////////// Program
///////////////////////////////////////

Blok: pocetak_token NizNaredbi kraj_token  { $$ = new Blok($2); }
;

NizNaredbi:  NizNaredbi ';' Naredba1       { $$ = $1; $$->push_back($3); }
| Naredba1                                 { $$ = new vector<Naredba*>(); $$->push_back($1); }
;


///////////////////////////////////////
////////////////// Naredba
///////////////////////////////////////

Naredba1: ispisi_token '(' AritmIzraz ')'                       { $$ = new IspisiIzraz($3);                 }
| ispisi_token '(' tekst_token ')'                              { $$ = new IspisiString(*$3);               }
| id_token '=' AritmIzraz                                       { $$ = new DodelaIzraz($1, $3);             }
| unesi_token '(' id_token ')'                                  { $$ = new UnesiIzraz($3);                  }
| ako_token AritmIzraz onda_token ':'  Naredba1 inace_token ':' Naredba1 
                                                                { $$ = new AkoJeOndaIzrazInace($2, $5, $8); }
| ako_token AritmIzraz onda_token ':' Naredba1                  { $$ = new AkoJeOndaIzraz($2, $5);          } 
| Blok                                                          { $$ = $1;                                  }
| dok_token AritmIzraz radi_token ':' Naredba1                  { $$ = new DokJeRadiNaredba($2, $5);        }
| ponavljaj_token ':' Naredba1 dok_token AritmIzraz             { $$ = new PonavljajDokJeNaredba($5, $3);   }
| za_token '(' Inic ';' AritmIzraz ';' Inic ')' Naredba1        { $$ = new ZaNaredba($3, $5, $7, $9);       }
| imeFunkcije_token '(' ')'                                     { $$ = new IdFunkcija(*$1, NULL);           }
| imeFunkcije_token '(' nizIzraza ')'                           { $$ = new IdFunkcija(*$1, $3);             }
| '\n'                                                          {}
| num_token                                                     {}
| vrati_token AritmIzraz                                        { $$ = new VratiNaredba($2); }
;

Inic: id_token '=' AritmIzraz              { $$ = new DodelaIzraz($1, $3);  }
;

///////////////////////////////////////
////////////////// Izraz
///////////////////////////////////////

AritmIzraz: AritmIzraz '+' AritmIzraz      { $$ = new Saberi($1, $3);       }
| AritmIzraz '-' AritmIzraz                { $$ = new Oduzmi($1, $3);       }
| AritmIzraz '*' AritmIzraz                { $$ = new Pomnozi($1, $3);      } 
| AritmIzraz '/' AritmIzraz                { $$ = new Podeli($1, $3);       } 
| '-' AritmIzraz %prec UMINUS              { $$ = new UMinus($2);           }
| AritmIzraz mod_token AritmIzraz          { $$ = new ModOper($1, $3);      }
| AritmIzraz '<' AritmIzraz                { $$ = new Manje($1, $3);        }
| AritmIzraz '>' AritmIzraz                { $$ = new Vece($1, $3);         }
| AritmIzraz jednako_token AritmIzraz      { $$ = new Jednako($1, $3);      }
| AritmIzraz razlicito_token AritmIzraz    { $$ = new Razlicito($1, $3);    }
| AritmIzraz veceJednako_token AritmIzraz  { $$ = new VeceJednako($1, $3);  }
| AritmIzraz manjeJednako_token AritmIzraz { $$ = new ManjeJednako($1, $3); }
| '(' AritmIzraz ')'                       { $$ = $2;                       }
| imeFunkcije_token '(' ')'                { $$ = new IdFunkcija(*$1, NULL);           }
| imeFunkcije_token '(' nizIzraza ')'      { $$ = new IdFunkcija(*$1, $3);             }
| num_token                                { $$ = new Konstanta($1);        }
| id_token                                 { $$ = new IdIzraz($1);          }
;

nizIzraza: nizIzraza ',' AritmIzraz        { $$ = $1; $$->push_back($3);                      }
| AritmIzraz                               { $$ = new vector<Izraz*>(); $$->push_back($1);    }
;


%%

bool proveri(string s)
{
  if (s[s.size()-1] != 'r' || s[s.size()-2] != 'j' || s[s.size()-3] != 'd' || s[s.size()-4] != '.')
    return false;
  else
    return true;
}

int main(int argc, char *argv[])
{
  // yydebug = 1;

  if ( argc > 2 || argc < 2 || !proveri(argv[1]))
    {
      cerr << "Nepravilan poziv. Morate proslediti datoteku sa ekstenzijom .djr!" << endl;
      return EXIT_FAILURE;
    }

  yyin = fopen(argv[1], "r");

  stekPromenljivih.push_back(map<char, int>());

  yyparse();
  
  fclose(yyin);

  return 0;
}
